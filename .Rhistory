for(i in st$ship_type){
sn <- get_ship_names(type)
for(j in sn$SHIPNAME){
list[i,j] <- filter(ships,SHIPNAME==j)
}
}
for(i in st$ship_type){
sn <- get_ship_names(i)
for(j in sn$SHIPNAME){
list[i,j] <- filter(ships,SHIPNAME==j)
}
}
for(i in st$ship_type){
sn <- get_ship_names(i)
for(j in sn$SHIPNAME){
list[j] <- filter(ships,SHIPNAME==j)
}
}
filter(ships,SHIPNAME=='KAROLI')
x<-filter(ships,SHIPNAME=='KAROLI')
View(x)
summary(x)
arrange(ships,DATETIME)
arrange(x,DATETIME)
xx <- arrange(x,DATETIME)
View(xx)
filter(ships,SHIPNAME=='KAROLI')%>%arrange(DATETIME)
xc <- find_observations('KAROLI')
find_observations <- function(ship_name){
filter(ships,SHIPNAME=='KAROLI')%>%arrange(DATETIME)%>%return()
}
xc <- find_observations('KAROLI')
xc <- find_observations('KAROLI')
c <- find_observations('KAROLI')
View(c)
View(c)
v<-diff(c$LAT)
v
54.77127-54.76542
length(v)
tail(v)
View(c)
max(v)
b<-diff(c$DATETIME)
v[1]
b[1]
v[2]
b[2]
v[2]/b[2]
v[2]/as.numeric(b[2])
v[1]/as.numeric(b[1])
v[3]/as.numeric(b[3])
[1:100]
1:100
list <- list()
for(i in 1:100){
list[i] <- v[i]/as.numeric(b[i])
}
plot(list)
plot(1:100,list)
distinct(c$SPEED)
distinct(c,SPEED)
s_names <- get_ship_names('KAROLI')
s_type <- get_ship_type()
s_names <- get_ship_names('Cargo')
s_type <- get_ship_type()
library(readr)
library(readr)
library(dplyr)
library(leaflet)
ships <- read_csv("src/ships.csv")
get_ship_type<-function(){
return(as.list(distinct(ships,ship_type)))
}
get_ship_names<-function(type){
subset(ships,ship_type==type,select = 'SHIPNAME')%>%
as.data.frame()%>%
distinct(SHIPNAME)%>%
return()
}
s_names <- get_ship_names('Cargo')
s_type <- get_ship_type()
find_observations <- function(ship_name){
filter(ships,SHIPNAME=='KAROLI')%>%arrange(DATETIME)%>%return()
}
karoli <- find_observations('KAROLI')
distinct(karoli,SHIPSPEED)
View(karoli)
distinct(karoli,SPEED)
#Understanding Data
karoli$LAT[1]
dif <- karoli$LAT[1]-karoli$LAT[2]
dif
lat <- karoli$LAT[1]-karoli$LAT[2]
lon <- karoli$LON[1]-karoli$LON[2]
lat <- karoli$LAT[1]-karoli$LAT[2]**2
square()
install.packages("geosphere")
library(geosphere)
lat <- c(karoli$LAT[1],karoli$LON[1])
lon <- c(karoli$LAT[2],karoli$LON[2])
distHaversine(lat,lon)
distHaversine(karoli$LAT,karoli$LON)
View(diff)
find_observations <- function(ship_name){
filter(ships,SHIPNAME=='KAROLI')%>%
arrange(DATETIME)%>%
mutate(distance = distHaversine(lag(c(LAT,LON),default = 0),distHaversine(c(LAT,LON))))%>%
return()
}
find_observations('KAROLI')
find_observations <- function(ship_name){
filter(ships,SHIPNAME=='KAROLI')%>%
arrange(DATETIME)%>%
mutate(distance = LAT+LON)%>%
return()
}
karoli <- find_observations('KAROLI')
View(karoli)
distHaversine(lag(c(LAT,LON),default = 0),distHaversine(c(LAT,LON)))
rlang::last_error()
find_observations <- function(ship_name){
filter(ships,SHIPNAME=='KAROLI')%>%
arrange(DATETIME)%>%
mutate(distance = distHaversine(c(LAT,LON),c(lag(LAT),lag(LON))))%>%
return()
}
karoli <- find_observations('KAROLI')
mutate(karoli,
dist = mapply(function(p1, p2) distm(p1, p2, fun=distHaversine), c(LAT,LON),c(lag(LAT),lag(LON)))
)
karoli %>% rowwise() %>% mutate(
dist = distm(c(LON, LAT), c(lag(lON), lag(LAT)), fun=distHaversine) # this works
)
karoli %>% rowwise() %>% mutate(
dist = distm(c(LON, LAT), c(lag(lON,0), lag(LAT,0)), fun=distHaversine) # this works
)
View(karoli)
karoli %>% rowwise() %>% mutate(
dist = distm(c(LON, LAT), c(lag(LON,0), lag(LAT,0)), fun=distHaversine) # this works
)
View(karoli)
find_observations <- function(ship_name){
filter(ships,SHIPNAME=='KAROLI')%>%
arrange(DATETIME)%>%
rowwise() %>%
mutate(dist = distm(c(LON, LAT), c(lag(LON,0), lag(LAT,0)), fun=distHaversine))%>%
filter(max(dist))%>%
return()
}
karoli <- find_observations('KAROLI')
find_observations <- function(ship_name){
filter(ships,SHIPNAME=='KAROLI')%>%
arrange(DATETIME)%>%
rowwise() %>%
mutate(dist = distm(c(LON, LAT), c(lag(LON,0), lag(LAT,0)), fun=distHaversine))%>%
filter(dist==max(dist))%>%
return()
}
karoli <- find_observations('KAROLI')
View(karoli)
find_observations <- function(ship_name){
filter(ships,SHIPNAME=='KAROLI')%>%
arrange(DATETIME)%>%
rowwise() %>%
mutate(dist = distm(c(LON, LAT), c(lag(LON,0), lag(LAT,0)), fun=distHaversine))%>%
return()
}
karoli <- find_observations('KAROLI')
View(karoli)
distance_cal <- function(long1, lat1, long2, lat2) {
R <- 6371 # Earth mean radius [km]
delta.long <- (long2 - long1)
delta.lat <- (lat2 - lat1)
a <- sin(delta.lat/2)^2 + cos(lat1) * cos(lat2) * sin(delta.long/2)^2
c <- 2 * asin(min(1,sqrt(a)))
d = R * c
return(d) # Distance in km
}
d <- distance_cal(karoli$LON[1],karoli$LAT[1],karoli$LON[2],karoli$LAT[2])
distHaversine(lat,lon)
distHaversine(-lat,-lon)
distHaversine(c(karoli$LON[1],karoli$LAT[1]),c(karoli$LON[2],karoli$LAT[2]))
d <- distance_cal(karoli$LON[1],karoli$LAT[1],karoli$LON[2],karoli$LAT[2])
karoli$LON[1]
karoli$LAT[1]
karoli$LON[2]
karoli$LAT[2]
distHaversine(c(karoli$LON[1],karoli$LAT[1]),c(karoli$LON[2],karoli$LAT[2]))
lon1<-karoli$LON[1]
lat1<-karoli$LAT[1]
lon2<-karoli$LON[2]
lat2<-karoli$LAT[2]
p1<-c(lon1,lat1)
p2<-c(lon2,lat2)
distVincentyEllipsoid(p1,p2)
m<-c(19.0760,72.8777)
d<-c(28.7041, 77.1025)
distVincentyEllipsoid(m,d)
distVincentyEllipsoid(d,m)
distHaversine(m,d)
m<-c(72.8777,19.0760)
d<-c(77.1025,28.7041)
distHaversine(m,d)
distVincentyEllipsoid(d,m)
distHaversine(m,d,r=6357)
for(i in karoli){
print(i[["LAT"]])
}
for(i in karoli){
print(i["LAT"])
}
for(i in karoli){
print(i)
}
for(i in karoli$LAT){
print(i)
}
for(i in c(karoli$LAT,karoli$LON){
print(i)
}
for(i in c(karoli$LAT,karoli$LON)){
print(i)
}
distance_cal <- function(long,lat, long2, lat2) {
R <- 6371 # Earth mean radius [km]
delta.long <- (long2 - long1)
delta.lat <- (lat2 - lat1)
a <- sin(delta.lat/2)^2 + cos(lat1) * cos(lat2) * sin(delta.long/2)^2
c <- 2 * asin(min(1,sqrt(a)))
d = R * c
return(d) # Distance in km
}
distance_cal(m,d)
distance_cal(72.8777,19.0760,77.1025,28.7041)
distance_cal(72.8777,19.0760,77.1025,28.7041)
find_observations <- function(ship_name){
filter(ships,SHIPNAME=='KAROLI')%>%
arrange(DATETIME)%>%
mutate(dist = apply(distHaversine(
c(LON,LAT),
c(lag(LON),lag(LAT))
))
)%>%
return()
}
karoli <- find_observations('KAROLI')
find_observations <- function(ship_name){
filter(ships,SHIPNAME=='KAROLI')%>%
arrange(DATETIME)%>%
apply(distHaversine(
c(LON,LAT),
c(lag(LON),lag(LAT))
))%>%
return()
}
karoli <- find_observations('KAROLI')
shiny::runApp()
runApp()
runApp()
activate()
library(renv)
activate()
library(rlang)
ships <- read_csv("src/ships.csv")
ships <- read_csv("src/ships.csv")
View(ships)
get_ship_type <- function() {
return(as.list(distinct(ships, ship_type))$ship_type)
}
get_ship_names <- function(type) {
subset(ships, ship_type == type, select = 'SHIPNAME') %>%
as.data.frame() %>%
distinct(SHIPNAME) %>%
as.list() %>%
return()
}
get_ship_names()
get_ship_type()
type<-get_ship_type()
get_ship_names(type)
types <- get_ship_type()
types <- list(get_ship_type())
View(types)
types <- get_ship_type()
View(ships)
library(readr)
ships <- read_csv("src/ships.csv", col_types = cols(SPEED = col_skip(),
COURSE = col_skip(), HEADING = col_skip(),
DESTINATION = col_skip(), FLAG = col_skip(),
LENGTH = col_skip(), SHIPTYPE = col_skip(),
SHIP_ID = col_skip(), WIDTH = col_skip(),
DWT = col_skip(), PORT = col_skip(),
date = col_skip(), week_nb = col_skip(),
port = col_skip(), is_parked = col_skip()))
View(ships)
write.csv(ships,"ships2.csv")
runApp()
runApp()
install.packages("testthat")
library(testthat)
source("src/utility.R") # This is only needed if your project is not a package
source("src/global.R")
source("src/utility.R")
source("global.R")
source("src/utility.R")
runApp()
ships <- read_csv("src/ships.csv")
source("global.R")
source("src/utility.R")
source("global.R")
source("src/utility.R")
View(ships)
View(ships)
write.csv2(ships,ships.csv,row.names = FALSE)
write.csv2(ships,"ships2.csv",row.names = FALSE)
write.csv(ships,"ships2.csv",row.names = FALSE)
write_csv(ships,"ships2.csv",row.names = FALSE)
write_csv(ships,"ships2.csv")
write_csv(ships,"ships2.csv")
library(readr)
ships2 <- read_csv("ships2.csv")
View(ships2)
write.csv(ships,"ships2.csv",col.names = FALSE)
write.csv(ships, "data.csv", row.names = FALSE)
write.csv(ships, "data.csv", row.names = F)
View(ships)
View(ships2)
View(ships)
library(readr)
ships <- read_csv("ships.csv", col_types = cols(SPEED = col_skip(),
COURSE = col_skip(), HEADING = col_skip(),
DESTINATION = col_skip(), FLAG = col_skip(),
LENGTH = col_skip(), SHIPTYPE = col_skip(),
SHIP_ID = col_skip(), WIDTH = col_skip(),
DWT = col_skip(), PORT = col_skip(),
date = col_skip(), week_nb = col_skip(),
port = col_skip(), is_parked = col_skip()))
View(ships)
View(ships)
write.csv(ships,"ships2.csv")
write.csv(ships,"ships2.csv",row.names = FALSE)
source("global.R")
source("src/utility.R")
get_ship_type <- function() {
return(as.list(distinct(ships, ship_type))$ship_type)
}
get_ship_type()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
install.packages("data.table")
library(data.table)
fread(src/ships.csv")
?
.
;;
a
z
!
exit()
>%>
5
rf
rc->x
library(data.table)
data<-fread(src/ships.csv")
library(data.table)
n<-fread("src/ships.csv")
install.packages("benchmarkme")
install.packages("Benchmarking")
library(benchmarkmeData)
detach("package:benchmarkmeData", unload = TRUE)
remove.packages("benchmarkmeData")
time(fread("src/ships.csv"))
timestamp()
##------ Thu Feb 04 23:40:58 2021 ------##
x <- fread("src/ships.csv")
y <- read.csv("src/ships.csv")
y <- read.csv("src/ships.csv")
profvis::profvis({})
profvis::profvis({x <- fread("src/ships.csv")
y <- read.csv("src/ships.csv")})
system.time(fread("src/ships.csv"))
system.time(fread("src/ships.csv"))
system.time(read.csv("src/ships.csv"))
x <- fread("src/ships.csv")
y <- read.csv("src/ships.csv")
View(x)
x[SHIPNAME=="KAROLI"]
sys.time(x[SHIPNAME=="KAROLI"])
system.time(x[SHIPNAME=="KAROLI"])
library(dplyr)
system.time(filter(x,shipname=="KAROLI"))
View(x)
system.time(filter(x,SHIPNAME=="KAROLI"))
system.time(x[SHIPNAME=="KAROLI"])
ships <- suppressWarnings(read_csv("src/ships.csv"))
SHIPS2 <- fread("src/ships.csv")
ships <- suppressWarnings(read_csv("src/ships.csv"))
library(readr)
#loading libraries
library(shiny)
library(shiny.semantic)
library(readr)
library(dplyr)
library(leaflet)
library(geosphere)
ships <- suppressWarnings(read_csv("src/ships.csv"))
system.time(as.list(distinct(ships, ship_type))$ship_type)
system.time(unique(dt[by = SHIPNAME]))
system.time(unique(SHIPS2[by = SHIPNAME]))
#Load Data File.
ships <- suppressWarnings(read_csv("src/ships.csv"))
ships2 <- fread("src/ships.csv")
#Load dependencies
system.time(unique(SHIPS2[j='SHIPNAME',by = SHIPNAME]))
c<-unique(SHIPS2[j='SHIPNAME',by = SHIPNAME])
system.time(as.list(distinct(ships, ship_type))$ship_type)
v <- as.list(distinct(ships, ship_type))$ship_type
View(c)
system.time(as.list(distinct(ships, ship_type))$ship_type)
View(ships2)
c<-unique(ships2[j='ship_type',by = ship_type])
View(c)
c<-unique(ships2[j='ship_type'])
c<-unique(ships2[j='ship_type'])
system.time(k<-unique(ships2[j='ship_type']))
system.time(k<-unique(ships2[j='ship_type']))
system.time(k<-unique(ships2[j='ship_type']))
system.time(k<-unique(ships2[j='ship_type']))
system.time(k<-unique(ships2[j='ship_type']))
system.time(k<-unique(ships2[j='ship_type']))
system.time(k<-unique(ships2[j='ship_type']))
system.time(k<-unique(ships2[j='ship_type']))
system.time(k<-unique(ships2[j='ship_type']))
system.time(k<-unique(ships2[j='ship_type']))
system.time(k<-unique(ships2[j='ship_type']))
system.time(k<-unique(ships2[j='ship_type']))
system.time(k<-unique(ships2[j='ship_type']))
system.time(k<-unique(ships2[j='ship_type']))
system.time(as.list(distinct(ships, ship_type))$ship_type)
system.time(as.list(distinct(ships, ship_type))$ship_type)
system.time(as.list(distinct(ships, ship_type))$ship_type)
system.time(as.list(distinct(ships, ship_type))$ship_type)
system.time(as.list(distinct(ships, ship_type))$ship_type)
system.time(as.list(distinct(ships, ship_type))$ship_type)
get_ship_type_2 <- function(){
return(unique(unique(ships2[j='ship_type'])))
}
get_ship_type_2()
get_ship_type()
get_ship_type <- function() {
return(as.list(distinct(ships, ship_type))$ship_type)
}
get_ship_type()
system.time(get_ship_type())
system.time(get_ship_type_2())
ships2[ship_type="Cargo"]
ships2[ship_type=="Cargo"]
unique(ships2[ship_type=="Cargo"])
unique(ships2[j="SHIPNAME",ship_type=="Cargo"])
get_ship_names <- function(type) {
subset(ships, ship_type == type, select = 'SHIPNAME') %>%
as.data.frame() %>%
distinct(SHIPNAME) %>%
as.list() %>%
return()
}
get_ship_names("KAROLI")
get_ship_names("KAROLI")$SHIPNAME
get_ship_names("Cargo")
system.time(get_ship_names("Cargo"))
system.time(unique(ships2[j="SHIPNAME",ship_type=="Cargo"]))
system.time(unique(ships2[j="SHIPNAME",ship_type=="Cargo"]))
system.time(unique(ships2[j="SHIPNAME",ship_type=="Cargo"]))
c<-unique(ships2[j="SHIPNAME",ship_type=="Cargo"])
filter_data_2 <- function(ship_name){
return(ships2[SHIPNAME==ship_name])
}
filter_data <- function(ship_name) {
return(filter(ships, SHIPNAME == ship_name) %>% arrange(DATETIME))
}
z<-filter_data("KAROLI")
c<-filter_data_2("KAROLI")
system.time(c<-filter_data_2("KAROLI"))
system.time(c<-filter_data("KAROLI"))
cv<-shift(ships2,n=1,type="lag")
View(cv)
ships2[dist = distHaversine(c(LONG,LAT), c(shift(LONG,1,"lead"),shift(LAT,1,"lead")), r = 6357000)]
x<-ships2[dist = distHaversine(c(LONG,LAT), c(shift(LONG,1,"lead"),shift(LAT,1,"lead")), r = 6357000)]
x<-ships2[,dist = distHaversine(c(LONG,LAT), c(shift(LONG,1,"lead"),shift(LAT,1,"lead")), r = 6357000)]
setDT(ships2)[,dist = distHaversine(c(LONG,LAT), c(shift(LONG,1,"lead"),shift(LAT,1,"lead")), r = 6357000)]
setDT(ships2)[,dist = distHaversine(c(LONG,LAT), c(shift(LONG,1,"lead"),shift(LAT,1,"lead")), r = 6357000)]
setDT(ships2)[dist = distHaversine(c(LONG,LAT), c(shift(LONG,1,"lead"),shift(LAT,1,"lead")), r = 6357000)]
setDT(ships2)[dist := distHaversine(c(LONG,LAT), c(shift(LONG,1,"lead"),shift(LAT,1,"lead")), r = 6357000)]
setDT(ships2)[,dist := distHaversine(c(LONG,LAT), c(shift(LONG,1,"lead"),shift(LAT,1,"lead")), r = 6357000)]
View(ships2)
setDT(ships2)[,dist := distHaversine(c(LON,LAT), c(shift(LON,1,"lead"),shift(LAT,1,"lead")), r = 6357000)]
setDT(ships2)[,dist := distHaversine(c(LON,LAT), c(shift(LON,1,"lead"),shift(LAT,1,"lead")), r = 6357000)]
#Load Data File.
ships <- suppressWarnings(read_csv("src/ships.csv"))
ships2 <- fread("src/ships.csv")
#Load dependencies
setDT(ships2)[,dist := distHaversine(c(LON,LAT), c(shift(LON,1,"lead",fill = 0),shift(LAT,1,"lead",fill = 0)), r = 6357000)]
c(shift(LON,1,"lead",fill = 0),shift(LAT,1,"lead",fill = 0))
setDT(ships2) [,dist :=shift(LON,1,"lead",fill = 0)]
View(ships2)
setDT(ships2) [,dist :=shift(LON,1,"lead")]
View(ships2)
